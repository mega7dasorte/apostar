//src/app.jsx
import { useEffect, useMemo, useState,useRef } from "react";
import { HashRouter as Router, Routes, Route, Link } from "react-router-dom";
import QRCode from "react-qr-code";
import IndicacoesView from "./IndicacoesView";
import Dashboard from "./Dashboard";
import PaymentForm from "./components/PaymentForm";
import React from "react";
import logo from "./logo.png";
import certificado from "./certificado.png";

// ================================
// UTIL & MOCK DATA (mantido do seu c√≥digo)
// ================================
const nomesBR = [
  "Jo√£o da Silva, S√£o Paulo",
  "Maria Oliveira, Rio de Janeiro",
  "Carlos Souza, Belo Horizonte",
  "Fernanda Lima, Recife",
  "Andr√© Santos, Curitiba",
  "Patr√≠cia Almeida, Salvador",
  "Ricardo Gomes, Porto Alegre",
  "Luciana Rocha, Bras√≠lia",
  "Bruno Carvalho, Fortaleza",
  "Paula Fernandes, Manaus",
  "Rafaela Martins, Campinas",
  "Diego Alves, Goi√¢nia",
  "Camila Teixeira, Natal",
  "Marcos Vin√≠cius, Santos",
  "Bianca Castro, Florian√≥polis",
];

const rostos = Array.from({ length: 30 }, (_, i) => `https://i.pravatar.cc/300?img=${i + 1}`);

const depoimentosSeed = [
  { nome: "Jos√©, Curitiba", texto: "‚ÄúCom esse pr√™mio, comprei minha casa pr√≥pria. Foi surreal ver meu nome nas mensagens!‚Äù" },
  { nome: "Fernanda, Recife", texto: "‚ÄúMinha vida mudou para sempre. Agora sou milion√°ria!‚Äù" },
  { nome: "Maria, S√£o Paulo", texto: "‚ÄúRealizei meus sonhos com essa sorte. Uma experi√™ncia divertida!‚Äù" },
  { nome: "Igor, Belo Horizonte", texto: "‚ÄúEu n√£o acreditava at√© ver meu c√≥digo Pix aparecer.‚Äù" },
];

const precosPorQuantidade = {3:5.0, 7: 39.9, 8: 56.0, 9: 63.0, 10: 70.0 };
const opcoesPremio = [20, 30, 40];

const LS_TOTAL_APOSTAS = "sf_total_apostas";
const LS_TOTAL_ARRECADADO = "sf_total_arrecadado";
const LS_PREMIO_ESCOLHIDO = "sf_premio_percentual";
const LS_REFERENCIA_USUARIO = "sf_user_ref";
const LS_INDICACOES = "sf_indicacoes";

function getRandomItem(arr) { return arr[Math.floor(Math.random() * arr.length)]; }
function randomUUID() { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => { const r = (Math.random() * 16) | 0; const v = c === "x" ? r : (r & 0x3) | 0x8; return v.toString(16); }); }
function formatBRL(value) {
  if (typeof value !== "number") return "R$ 0,00";
  return value.toLocaleString("pt-BR", { style: "currency", currency: "BRL" });
}


// ================================
// COMPONENTES
// ================================
function HomeView() {
  const [qtdNumeros, setQtdNumeros] = useState(7);
  const [selecionados, setSelecionados] = useState([]);
  const [qtdApostas, setQtdApostas] = useState(1);

  const [totalApostas, setTotalApostas] = useState(() => Number(localStorage.getItem(LS_TOTAL_APOSTAS) || 0));
  const [totalArrecadado, setTotalArrecadado] = useState(() => Number(localStorage.getItem(LS_TOTAL_ARRECADADO) || 0));
  const [premioPercentual, setPremioPercentual] = useState(() => Number(localStorage.getItem(LS_PREMIO_ESCOLHIDO) || 30));

  const [mensagem, setMensagem] = useState("");
  const [mensagemFoto, setMensagemFoto] = useState(getRandomItem(rostos));
  const [pixPayload, setPixPayload] = useState("");
  const [pixTxid, setPixTxid] = useState("");
  const [liberouIndicacoes, setLiberouIndicacoes] = useState(false);

  const [refAtual, setRefAtual] = useState(() => {
    const saved = localStorage.getItem(LS_REFERENCIA_USUARIO);
    if (saved) return JSON.parse(saved);
    const novo = { id: randomUUID(), codigo: `REF-${Math.random().toString(36).slice(2, 8).toUpperCase()}` };
    localStorage.setItem(LS_REFERENCIA_USUARIO, JSON.stringify(novo));
    return novo;
  });

  const [mostrarPaymentForm, setMostrarPaymentForm] = useState(false);
  const [paymentCreated, setPaymentCreated] = useState(null);
  const [mostrarIndicacoesInline, setMostrarIndicacoesInline] = useState(false);

  const depoimentos = useMemo(() => depoimentosSeed.map((d, i) => ({ ...d, foto: rostos[i % rostos.length] })), []);

  const VISIBLE_WINNERS = 3;
  const COLUMN_COUNT = 4;
  const INITIAL_QUEUE_LENGTH = 7;

  function makeWinner() {
    return {
      id: randomUUID(),
      nome: getRandomItem(nomesBR),
      valor: (Math.floor(Math.random() * 900) + 100) * 1000, // ex: 100.000..999.000
      foto: getRandomItem(rostos),
      isNew: false,
    };
  }

  // estado com colunas de vencedores (cada coluna √© um array de N itens)
  const [winnersCols, setWinnersCols] = useState(() =>
    Array.from({ length: COLUMN_COUNT }).map(() =>
      Array.from({ length: INITIAL_QUEUE_LENGTH }).map(() => makeWinner())
    )
  );

  // l√≥gica para "puxar" um novo vencedor em cada coluna em timers diferentes
  useEffect(() => {
    const timers = [];

    for (let colIdx = 0; colIdx < COLUMN_COUNT; colIdx++) {
      // cada coluna atualiza em um ritmo ligeiramente diferente (para parecer natural)
      const base = 2800; // tempo base
      const jitter = Math.floor(Math.random() * 800); // pequena aleatoriedade
      const intervalMs = base + colIdx * 700 + jitter;

      const t = setInterval(() => {
        setWinnersCols((prev) =>
          prev.map((col, idx) => {
            if (idx !== colIdx) return col;
            const newTop = { ...makeWinner(), isNew: true };
            const next = [newTop, ...col.slice(0, col.length - 1)];
            return next;
          })
        );

        // limpa a flag isNew ap√≥s a anima√ß√£o (caso precise remover classe)
        setTimeout(() => {
          setWinnersCols((prev) =>
            prev.map((col, idx) =>
              idx !== colIdx ? col : col.map((it) => ({ ...it, isNew: false }))
            )
          );
        }, 900);
      }, intervalMs);

      timers.push(t);
    }

    return () => timers.forEach(clearInterval);
  }, []);

  useEffect(() => { localStorage.setItem(LS_TOTAL_APOSTAS, String(totalApostas)); }, [totalApostas]);
  useEffect(() => { localStorage.setItem(LS_TOTAL_ARRECADADO, String(totalArrecadado)); }, [totalArrecadado]);
  useEffect(() => { localStorage.setItem(LS_PREMIO_ESCOLHIDO, String(premioPercentual)); }, [premioPercentual]);

  const precoUnitario = precosPorQuantidade[qtdNumeros] || null;
  const totalCompra = precoUnitario ? precoUnitario * qtdApostas : 0;

  const toggleNumero = (n) => {
    if (selecionados.includes(n)) setSelecionados(selecionados.filter((x) => x !== n));
    else if (selecionados.length < qtdNumeros) setSelecionados([...selecionados, n]);
  };

  const podeConfirmar = selecionados.length === qtdNumeros && precoUnitario && qtdApostas >= 1 && qtdApostas <= 1000;
  

  const premioPrevisto = (totalArrecadado * premioPercentual) / 100;


  const [numerosConfirmados, setNumerosConfirmados] = useState([]);
  const formRef = useRef(null);

  const confirmarAposta = () => {
    if (!podeConfirmar) return;

    setTotalApostas((t) => t + qtdApostas);
    setTotalArrecadado((v) => v + totalCompra);
    if (qtdNumeros >= 9) setLiberouIndicacoes(true);

    const txid = randomUUID().slice(0, 25);
    const chave = "c8875076-656d-4a18-8094-c70c67dbb56c";
    const descricao = `APOSTA-${qtdNumeros}N-${qtdApostas}X`;
    const payload = `PIX-FICTICIO|BANK:pagBank|CHAVE:${chave}|TXID:${txid}|DESC:${descricao}|VLR:${totalCompra.toFixed(2)}`;
    setPixTxid(txid);
    setPixPayload(payload);

    // üöÄ N√£o limpamos mais os n√∫meros antes de mostrar o form
    setNumerosConfirmados([...selecionados]);

    setMostrarPaymentForm(true);

    // scroll autom√°tico para o form
    setTimeout(() => {
      formRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };


  return (
    <main className="container">
      {/* HERO */}
      <section className="hero">
        <h2 className="hero-title">Escolha seus n√∫meros e participe</h2>
        <p className="hero-subtitle">
          Pr√™mios de at√© <strong className="highlight-light">R$ 500.000</strong> ‚Äî ENTRE AGORA e transforme sua vida. Vagas por sorteio s√£o limitadas!
        </p>
        <p className="text-xs disclaimer"></p>
      </section>

      {/* MENSAGENS DE GANHADORES */}
      <section className="mensagem-container">
        <div className="mensagem-head">
          <h2 className="mensagem-titulo">
            <span className="spark">üî•</span>{" "}
            <span className="highlight">√öltimos Ganhadores</span> ‚Äî veja quem ganhou
            agora!
          </h2>
          <p className="mensagem-sub">
            A sorte pode ser sua a qualquer momento ‚Äî <span className="cta">jogue j√°</span>!
          </p>
        </div>

        <div className="grid-ganhadores">
          {winnersCols.map((col, colIdx) => (
            <div key={colIdx} className="coluna-ganhadores" aria-hidden={false}>
              {col.slice(0, VISIBLE_WINNERS).map((win, idx) => (
                <div
                  key={win.id}
                  className={`ganhador-item ${win.isNew ? "is-new" : ""}`}
                  aria-live="polite"
                >
                  <img src={win.foto} alt={`foto ${win.nome}`} className="ganhador-foto" />
                  <div className="ganhador-info">
                    <div className="ganhador-nome">{win.nome}</div>
                    <div className="ganhador-premio">
                      <span className="badge">J√Å GANHOU!</span>
                      <span className="valor">{formatBRL(win.valor)}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ))}
        </div>
      </section>


      {/* TOTAIS */}
      <section className="totais-container" style={{ margin: "2.5rem 0" }}>
        <div>Total de apostas: <strong>{Number(totalApostas).toLocaleString()}0000</strong></div>
        <div className="premio-mes">Pr√™mio do m√™s: <strong class="highlight">{formatBRL(premioPrevisto * 1000)}</strong></div>
      </section>

      {/* APOSTAS */}
      <section className="aposta-container">
        <div className="aposta-opcoes">
          <label>Quantidade de n√∫meros</label>
          <select value={qtdNumeros} 
              onChange={(e) => {
                setQtdNumeros(Number(e.target.value));
                setSelecionados([]);        // limpa a grid
                setNumerosConfirmados([]);  // limpa n√∫meros confirmados
                setMostrarPaymentForm(false); // fecha o form at√© confirmar de novo
              }}
          >
            <option value={3}>3 n√∫meros ‚Äî {formatBRL(precosPorQuantidade[3])}</option>
            <option value={7}>7 n√∫meros ‚Äî {formatBRL(precosPorQuantidade[7])}</option>
            <option value={8}>8 n√∫meros ‚Äî {formatBRL(precosPorQuantidade[8])}</option>
            <option value={9}>9 n√∫meros ‚Äî {formatBRL(precosPorQuantidade[9])}</option>
            <option value={10}>10 n√∫meros ‚Äî {formatBRL(precosPorQuantidade[10])}</option>
          </select>
        </div>

        <div className="aposta-opcoes">
          <label>Quantidade de apostas</label>
          <input type="number" min={1} max={1000} value={qtdApostas} onChange={(e) => setQtdApostas(Math.min(1000, Math.max(1, Number(e.target.value) || 1)))} />
        </div>

        <div className="aposta-total">Total desta compra: {formatBRL(totalCompra)}</div>

        <div className="grid-numeros">
          {Array.from({ length: 70 }, (_, i) => i + 1).map((n) => (
            <button key={n} onClick={() => toggleNumero(n)} className={selecionados.includes(n) ? "numero-selecionado" : ""}>{n}</button>
          ))}
        </div>

        <p className="selecionados-info">
          Selecionados ({numerosConfirmados.length > 0 ? numerosConfirmados.length : selecionados.length}/{qtdNumeros}):{" "}
          {(numerosConfirmados.length > 0 ? numerosConfirmados : selecionados).join(", ") || "nenhum"}
        </p>

        <button onClick={confirmarAposta} disabled={!podeConfirmar} className="botao-confirmar">‚úÖ Confirmar Aposta</button>
      </section>

      {mostrarIndicacoesInline && (
        <section className="indicacoes-inline">
          <h3>Indique seus amigos</h3>
          <IndicacoesView refAtual={refAtual} />
        </section>
      )}

      {mostrarPaymentForm && (
        <section ref={formRef} className="payment-inline">
          <PaymentForm
            totalCompra={totalCompra}
            selectedNumbers={numerosConfirmados}   // üëà passando para o backend
            onSuccess={(paymentRecord) => {
              setPaymentCreated(paymentRecord);
              setMostrarIndicacoesInline(true);
              setSelecionados([]); // limpa s√≥ depois que pagou
            }}
          />
        </section>
      )}

      <section className="depoimentos-container">
        {depoimentos.map((d, idx) => (
          <div key={idx} className="depoimento shadow">
            <p>{d.texto}</p>
            <p>‚Äì {d.nome}</p>
          </div>
        ))}
      </section>

      <footer className="footer">
        <div className="footer-top">
          <div className="footer-logo">
            <img src={logo} alt="Mega da Sorte" />  
            <p className="slogan">Mega da Sorte ‚Äî A sorte pode estar a um clique!</p>
          </div>

          <div className="footer-links">
            <h4>Institucional</h4>
            <ul>
              <li><a href="/sobre">Sobre N√≥s</a></li>
              <li><a href="/como-jogar">Como Jogar</a></li>
              <li><a href="/politica-privacidade">Pol√≠tica de Privacidade</a></li>
              <li><a href="/termos">Termos & Condi√ß√µes</a></li>
              <li><a href="/responsabilidade">Jogo Respons√°vel</a></li>
            </ul>
          </div>

          <div className="footer-contato">
            <h4>Atendimento</h4>
            <ul>
              <li>Email: suporte@megadasorte.com</li>
              <li>WhatsApp: (11) 99999-9999</li>
              <li>Hor√°rio: 24h, todos os dias</li>
            </ul>
          </div>

          <div className="footer-social">
            <h4>Siga-nos</h4>
            <div className="social-icons">
              <a href="#"><i className="fab fa-instagram"></i></a>
              <a href="#"><i className="fab fa-tiktok"></i></a>
              <a href="#"><i className="fab fa-facebook"></i></a>
              <a href="#"><i className="fab fa-x-twitter"></i></a>
            </div>
          </div>
        </div>

        <div className="footer-middle">
          <div className="footer-certificacoes">
            <img src={certificado} alt="Certifica√ß√£o" style={{width:'6rem'}}/>  
            <p>Autorizado e regulado pela legisla√ß√£o brasileira.</p>
          </div>
          <div className="responsible-play">
            <span>üîû 18+ | Jogue com responsabilidade</span>
            <p>O jogo √© para maiores de idade. Se sentir que perdeu o controle, procure ajuda em nossa se√ß√£o de <a href="/responsabilidade">Jogo Respons√°vel</a>.</p>
          </div>
        </div>

        <div className="footer-bottom">
          <p>
            ¬© {new Date().getFullYear()} Mega da Sorte. Todos os direitos reservados.  
            Operado por Mega Sorte Brasil LTDA. CNPJ n¬∫ 55.459.453/0001-72.  
            Endere√ßo: Av. Paulista, 1000 ‚Äî S√£o Paulo/SP.  
          </p>
        </div>
      </footer>

    </main>


  );
}

// ================================
// WRAPPER para Indica√ß√µes
// ================================
function IndicacoesViewWrapper() {
  const [refAtual, setRefAtual] = useState(null);

  useEffect(() => {
    const saved = localStorage.getItem(LS_REFERENCIA_USUARIO);
    if (saved) setRefAtual(JSON.parse(saved));
  }, []);

  if (!refAtual) return <p>Carregando...</p>;

  return <IndicacoesView refAtual={refAtual} />;
}

// ================================
// EXPORTA√á√ÉO COM ROUTER
// ================================
export default function App() {
  return (
    <Router>
      <header className="header">
        <div className="header-left">
          <h1 className="logo">üé≤ Mega da Sorte</h1>
          <p className="slogan">Sua sorte come√ßa aqui ‚Äî r√°pido, seguro e 100% sigiloso</p>
        </div>

        <nav className="nav">
          <Link to="/">üè† Jogar na MEGA da SORTE</Link>
          <Link to="/indicacoes">üë• Indica√ß√µes</Link>
          <Link to="/pagamento">üí≥ Dep√≥sito</Link>
        </nav>
      </header>

      <div className="header-info">
        <span>üîí Seus dados s√£o totalmente sigilosos</span>
        <span>üîû Apenas maiores de 18 anos podem jogar</span>
      </div>

      <Routes>
        <Route path="/" element={<HomeView />} />
        <Route path="/indicacoes" element={<IndicacoesViewWrapper />} />
        <Route path="/pagamento" element={<PaymentForm />} />
        <Route path="/dashboard" element={<Dashboard />} />
      </Routes>
    </Router>
    
  );
}
